% Main script of the optimization package
%
% Test the variation of detector signal as a function of energy
% and filtration
% We use the conclusions by Hupfer to select our starting point
% For soft tissue we're going to use Cu filtration and kVp from 40 to 110

% Set the graphic environemnt
set(0,'DefaultFigureCreateFcn',get(0, 'FactoryFigureCreateFcn'));

% Folder for plotting
outdir = 'D:/cttb_acq/geometry5/carac_det5/';

% Constants
kVVec   = 40:1:110;        % Kilovoltage vector
nkV     = length(kVVec);   % Number of kVs
CuThick = 0.2;   % Copper thicknesses to test
AlThick = 1;     % Aluminum thicknesses to test
nCuTh   = length(CuThick); 
nAlTh   = length(AlThick);
binEn   = 1:150;           % Energy bins in the spectra, for the time being must match the one by Spektr
nBinEn  = length(binEn);

% Detector function response
detFile  = 'C:/Users/aeroesp/Documents/MATLAB/matlab_code/optimize_protocols/HamamatsuC7940.txt';
% Load detector
fid1 = fopen(detFile,'r');
det  = fscanf(fid1,'%f',nBinEn);
fclose(fid1);
% Generate ideal detector to compare with our real detector
detIdeal = mean(det)*ones(size(det));


% Load the uFocus TASMIP polynomials generated by modTASMIP_v6
tasmipLoad = load('C:/Users/aeroesp/Documents/MATLAB/matlab_code/optimize_protocols/tasmip_uFocus_v2.mat');

% Generate spectra for the kVs used to estimate the dose
% Storage for new spectra
s_sim = zeros(nBinEn,nkV);
% Generate new spectra and scale it
for ikV=1:nkV,
    % Generate and preprocess if needed
    for iEn = 1:kVVec(ikV),
        s_sim(iEn,ikV) = tasmipLoad.a_poly(1,iEn) + tasmipLoad.a_poly(2,iEn)*kVVec(ikV) + tasmipLoad.a_poly(3,iEn)*(kVVec(ikV)^2) + tasmipLoad.a_poly(4,iEn)*(kVVec(ikV)^3);
    end
end

% Define the phantoms and read the attenuation data
ratSize   = 50; % mm
mouseSize = 30; % mm

% Now loop getting the detector signal behind a soft-tissue cilinder
% first for a rat, then for a mouse, see if we get similar results to those
% of Hupfer et al.
s_sim_Cu_f        = zeros(nBinEn,nkV,nCuTh);
sig_ST_Cu_rat     = zeros(nkV,nCuTh);
sig_ST_Cu_mouse   = zeros(nkV,nCuTh);
att_ST_Cu_rat     = zeros(nkV,nCuTh);
att_ST_Cu_mouse   = zeros(nkV,nCuTh);
att_t_ST_Cu_rat   = zeros(nkV,nCuTh);
att_t_ST_Cu_mouse = zeros(nkV,nCuTh);
sig_fl_ST_Cu      = zeros(nkV,nCuTh);
for iTh = 1:nCuTh,
    for ikV=1:nkV,
        % Filter
        s_f        = spektrBeers(s_sim(:,ikV),[29 CuThick(iTh)]);
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 mouseSize]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_ST_Cu_mouse(ikV,iTh)   = sum(s_tmp_d);
        att_ST_Cu_mouse(ikV,iTh)   = sig_ST_Cu_mouse(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_ST_Cu_mouse(ikV,iTh) = sig_ST_Cu_mouse(ikV,iTh)/sum(s_f.*det);
        % Now for the rat
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 ratSize]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_ST_Cu_rat(ikV,iTh)   = sum(s_tmp_d);
        att_ST_Cu_rat(ikV,iTh)   = sig_ST_Cu_rat(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_ST_Cu_rat(ikV,iTh) = sig_ST_Cu_rat(ikV,iTh)/sum(s_f.*det);
        s_sim_Cu_f(:,ikV,iTh)    = s_f;
        sig_fl_ST_Cu(ikV,iTh)  = sum(s_f.*det);
    end
end

% Loop for Al 
s_sim_Al_f        = zeros(nBinEn,nkV,nAlTh);
sig_ST_Al_rat     = zeros(nkV,nCuTh);
sig_ST_Al_mouse   = zeros(nkV,nCuTh);
att_ST_Al_rat     = zeros(nkV,nCuTh);
att_ST_Al_mouse   = zeros(nkV,nCuTh);
att_t_ST_Al_rat   = zeros(nkV,nCuTh);
att_t_ST_Al_mouse = zeros(nkV,nCuTh);
sig_fl_ST_Al      = zeros(nkV,nCuTh);
for iTh = 1:nAlTh,
    for ikV=1:nkV,
        % Filter
        s_f        = spektrBeers(s_sim(:,ikV),[13 AlThick(iTh)]);
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 mouseSize]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_ST_Al_mouse(ikV,iTh)   = sum(s_tmp_d);
        att_ST_Al_mouse(ikV,iTh)   = sig_ST_Al_mouse(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_ST_Al_mouse(ikV,iTh) = sig_ST_Al_mouse(ikV,iTh)/sum(s_f.*det);
        % Now for the rat
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 ratSize]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_ST_Al_rat(ikV,iTh)   = sum(s_tmp_d);
        att_ST_Al_rat(ikV,iTh)   = sig_ST_Al_rat(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_ST_Al_rat(ikV,iTh) = sig_ST_Al_rat(ikV,iTh)/sum(s_f.*det);
        s_sim_Al_f(:,ikV,iTh)    = s_f;
        sig_fl_ST_Al(ikV,iTh)    = sum(s_f.*det);
    end
end

% Find the peaks in the curves
[mx_Cu_m pos_Cu_m] = max(att_ST_Cu_mouse);
[mx_Cu_r pos_Cu_r] = max(att_ST_Cu_rat);
[mx_Al_m pos_Al_m] = max(att_ST_Al_mouse);
[mx_Al_r pos_Al_r] = max(att_ST_Al_rat);
% Translate positions into kVs
kV_Cu_m = kVVec(pos_Cu_m);
kV_Cu_r = kVVec(pos_Cu_r);
kV_Al_m = kVVec(pos_Al_m);
kV_Al_r = kVVec(pos_Al_r);

% Plot the data
% Set sizes
width  = 3;
height = 3;
% Define styles
% styles    = cell(nCuTh,1);
% styles{1} = 'k*-';
% styles{2} = 'ko-';
% styles{3} = 'kd-';
% styles{4} = 'ks-';
% styles{5} = 'kx-';
% styles{6} = 'k+-';
LineStyles     = cell(nCuTh,1);
LineStyles{1}  = '-';
LineWidth      = cell(nCuTh,1);
LineWidth{1}   = 2;
ColorStyles    = cell(2,1);
% ColorStyles{1} = 'r';
% ColorStyles{2} = 'b';
% ColorStyles{3} = 'g';
% ColorStyles{4} = 'c';
% ColorStyles{5} = 'm';
% ColorStyles{6} = 'k';
ColorStyles{1} = [0.9 0.9 0.0];
ColorStyles{2} = [0 1 1];
% Legends
legCu    = cell(2,1);
legCu{1} = strcat(num2str(CuThick(1)),' mm Cu - Mouse size');
legCu{2} = strcat(num2str(CuThick(1)),' mm Cu - Rat size');
legAl    = cell(2,1);
legAl{1} = strcat(num2str(AlThick(1)),' mm Al - Mouse size');
legAl{2} = strcat(num2str(AlThick(1)),' mm Al - Rat size');


% First for mouse data
% Copper

figure;
hold on;
for iTh = 1:nCuTh,
    ax(iTh) = plot(kVVec,att_ST_Cu_mouse(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
    plot(kV_Cu_m,mx_Cu_m,'r.','MarkerSize',16);
end
title('Mouse - Copper'); xlabel('Voltage (kV)');ylabel('S_d_e_t / S_i_d_e_a_l');
ylim([1.24 1.5]);
xlim([kVVec(1) kVVec(length(kVVec))]);
box on;
%legend(ax,legCu,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
%print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOpt_mouseCu.tif',outdir));
% Aluminum
figure;
hold on;


    ax(1) = plot(kVVec,att_ST_Al_mouse(:,1),LineStyles{1},'LineWidth',LineWidth{1},'Color',ColorStyles{1});
    plot(kV_Al_m,mx_Al_m,'r.','MarkerSize',16);
%     hold on
    ax(2) = plot(kVVec,att_ST_Al_rat(:,1),LineStyles{1},'LineWidth',LineWidth{1},'Color',ColorStyles{2});
    plot(kV_Al_r,mx_Al_r,'r.','MarkerSize',16);

title('Aluminum Filtration'); xlabel('Voltage (kV)');ylabel('S_d_e_t / S_i_d_e_a_l');
ylim([1.24 1.5]);
xlim([kVVec(1) kVVec(length(kVVec))]);
box on;
legend(ax,legAl,'Location','SouthEast');
%legend(axr,legAl(2),'Location','SouthEast');
%legend(axr,legAlr,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
%print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOpt_mouseAl.tif',outdir));
% First for rat data
% Copper
figure;
hold on;

    ax(1) = plot(kVVec,att_ST_Cu_mouse(:,1),LineStyles{1},'LineWidth',LineWidth{1},'Color',ColorStyles{1});
    plot(kV_Cu_m,mx_Cu_m,'r.','MarkerSize',16);
    ax(2) = plot(kVVec,att_ST_Cu_rat(:,1),LineStyles{1},'LineWidth',LineWidth{1},'Color',ColorStyles{2});
    plot(kV_Cu_r,mx_Cu_r,'r.','MarkerSize',16);

title('Rat and Mouse - 0.2mm Copper'); xlabel('Voltage (kV)');ylabel('S_d_e_t / S_i_d_e_a_l');
ylim([1.24 1.5]);
xlim([kVVec(1) kVVec(length(kVVec))]);
box on;
%legend(ax,legCu,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
%print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOpt_ratCu.tif',outdir));
% Aluminum
figure;
hold on;
for iTh = 1:nAlTh,
    ax(iTh) = plot(kVVec,att_ST_Al_rat(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
    plot(kV_Al_r,mx_Al_r,'r.','MarkerSize',16);
end
title('Rat - Aluminum');xlabel('Voltage (kV)');ylabel('S_d_e_t / S_i_d_e_a_l');
ylim([1.24 1.5]);
xlim([kVVec(1) kVVec(length(kVVec))]);
box on;
% legend(ax,legAl,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
%print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOpt_ratAl.tif',outdir));


% Power issues
% Read gain data to obtain detector scaling factor
gainFile = './gain_cal_data';
[avedk fl mA binningH binningV] = readGainCal(gainFile);

kVgain = 66;
AlFilt = 1.0;
% Compute spectrum
s_gain = zeros(nBinEn,1);
% Generate and preprocess if needed
for iEn = 1:kVgain,
    s_gain(iEn) = tasmipLoad.a_poly(1,iEn) + tasmipLoad.a_poly(2,iEn)*kVgain + tasmipLoad.a_poly(3,iEn)*(kVgain^2) + tasmipLoad.a_poly(4,iEn)*(kVgain^3);
end
s_gain_f = spektrBeers(s_gain,[29 0.2]);

% Multiply spectrum by detector response
gainOutSim = sum(s_gain_f.*det);

% Scale
t_fac     = (1/(230^2))/(1/(325^2));
bin_fac   = 4;
fl_trans  = mean(mean(fl,2))/(t_fac * bin_fac);
sc_factor = fl_trans / gainOutSim;
sc_factor = sc_factor / mA;
% 
% % Start power calculations - First scale the data and then find the current
% % we need to get
% sig_ST_Cu_mouse_s    = sig_ST_Cu_mouse(pos_Cu_m) * sc_factor;
% sig_ST_Cu_rat_s      = sig_ST_Cu_rat(pos_Cu_r)   * sc_factor;
% sig_ST_Al_mouse_s    = sig_ST_Al_mouse(pos_Al_m) * sc_factor;
% sig_ST_Al_rat_s      = sig_ST_Al_rat(pos_Al_r)   * sc_factor;
% sig_fl_ST_Cu_mouse_s = sig_fl_ST_Cu(pos_Cu_m)    * sc_factor;
% sig_fl_ST_Al_mouse_s = sig_fl_ST_Al(pos_Al_m)    * sc_factor;
% sig_fl_ST_Cu_rat_s   = sig_fl_ST_Cu(pos_Cu_r)    * sc_factor;
% sig_fl_ST_Al_rat_s   = sig_fl_ST_Al(pos_Al_r)    * sc_factor;
% % 
% % figure;plot(sig_ST_Cu_mouse_s,'r*-');
% % hold on;plot(sig_ST_Cu_rat_s,'ro-');
% % hold on;plot(sig_ST_Al_mouse_s,'g*-');
% % hold on;plot(sig_ST_Al_rat_s,'go-');
% 
% % Desired signal - we want to work at around 90% of the dynamic range,
% % which is a common working point for flat-panel detectors
% avDark = 0;
% bitDepth     = 12;
% targetSignal = 0.9 * (((2.0^bitDepth) - 1.0) - avDark);
% 
% % See the current necessary to get the flood data
% cur_fl_ST_Cu_mouse = (1.0./sig_fl_ST_Cu_mouse_s) * targetSignal;
% cur_fl_ST_Al_mouse = (1.0./sig_fl_ST_Al_mouse_s) * targetSignal;
% cur_fl_ST_Cu_rat   = (1.0./sig_fl_ST_Cu_rat_s) * targetSignal;
% cur_fl_ST_Al_rat   = (1.0./sig_fl_ST_Al_rat_s) * targetSignal;
% 
% % Compute Powers
% pow_fl_ST_Cu_mouse    = kVVec(pos_Cu_m).*cur_fl_ST_Cu_mouse;
% pow_fl_ST_Al_mouse    = kVVec(pos_Al_m).*cur_fl_ST_Al_mouse;
% pow_fl_ST_Cu_rat      = kVVec(pos_Cu_r).*cur_fl_ST_Cu_rat;
% pow_fl_ST_Al_rat      = kVVec(pos_Al_r).*cur_fl_ST_Al_rat;
% pow_fl_ST_Cu_mouse_b4 = pow_fl_B_Cu_b/4.0;
% pow_fl_ST_Al_mouse_b4 = pow_fl_B_Al_b/4.0;
% pow_fl_ST_Cu_rat_b4   = pow_fl_B_Cu_b/4.0;
% pow_fl_ST_Al_rat_b4   = pow_fl_B_Al_b/4.0;
% 
% % Now get the signal level we'll get for the given current value
% detSig_ST_Cu_mouse_s = sig_ST_Cu_mouse_s.*cur_fl_ST_Cu_mouse;
% detSig_ST_Cu_rat_s   = sig_ST_Cu_rat_s  .*cur_fl_ST_Cu_rat;
% detSig_ST_Al_mouse_s = sig_ST_Al_mouse_s.*cur_fl_ST_Al_mouse;
% detSig_ST_Al_rat_s   = sig_ST_Al_rat_s  .*cur_fl_ST_Al_rat;


% Now do the calculations for Bone imaging
% In this case we will compute the minimum energy for which we get an
% appropriate signal since results by Hupfer pointed that, for an ideal
% detector, the lower the energy the larger the contrast and the lower the
% dose that would delivered for a given CNR value.

% Recompute spectra and then get detector values with the proper scaling
% Define the phantoms and read the attenuation data
ratBone     = 3;
mouseBone   = 2;
ratSize_b   = 50 - ratBone; % mm
mouseSize_b = 30 - mouseBone; % mm

% Now loop getting the detector signal behind a soft-tissue cilinder
% first for a rat, then for a mouse, see if we get similar results to those
% of Hupfer et al.

% Copper
s_sim_Cu_f_b       = zeros(nBinEn,nkV,nCuTh);
sig_B_Cu_rat_b     = zeros(nkV,nCuTh);
sig_B_Cu_mouse_b   = zeros(nkV,nCuTh);
att_B_Cu_rat_b     = zeros(nkV,nCuTh);
att_B_Cu_mouse_b   = zeros(nkV,nCuTh);
att_t_B_Cu_rat_b   = zeros(nkV,nCuTh);
att_t_B_Cu_mouse_b = zeros(nkV,nCuTh);
sig_fl_B_Cu_b      = zeros(nkV,nCuTh);
for iTh = 1:nCuTh,
    for ikV=1:nkV,
        % Filter
        s_f        = spektrBeers(s_sim(:,ikV),[29 CuThick(iTh)]);
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 mouseSize_b ; spektrCompound2C('Bone') mouseBone]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_B_Cu_mouse_b(ikV,iTh)   = sum(s_tmp_d);
        att_B_Cu_mouse_b(ikV,iTh)   = sig_B_Cu_mouse_b(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_B_Cu_mouse_b(ikV,iTh) = sig_B_Cu_mouse_b(ikV,iTh)/sum(s_f.*det);
        % Now for the rat
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 ratSize_b ; spektrCompound2C('Bone') ratBone]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_B_Cu_rat_b(ikV,iTh)   = sum(s_tmp_d);
        att_B_Cu_rat_b(ikV,iTh)   = sig_B_Cu_rat_b(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_B_Cu_rat_b(ikV,iTh) = sig_B_Cu_rat_b(ikV,iTh)/sum(s_f.*det);
        s_sim_Cu_f_b(:,ikV,iTh)   = s_f;
        sig_fl_B_Cu_b(ikV,iTh)  = sum(s_f.*det);
    end
end

% Aluminum
s_sim_Al_f_b       = zeros(nBinEn,nkV,nAlTh);
sig_B_Al_rat_b     = zeros(nkV,nAlTh);
sig_B_Al_mouse_b   = zeros(nkV,nAlTh);
att_B_Al_rat_b     = zeros(nkV,nAlTh);
att_B_Al_mouse_b   = zeros(nkV,nAlTh);
att_t_B_Al_rat_b   = zeros(nkV,nAlTh);
att_t_B_Al_mouse_b = zeros(nkV,nAlTh);
sig_fl_B_Al_b      = zeros(nkV,nAlTh);
for iTh = 1:nAlTh,
    for ikV=1:nkV,
        % Filter
        s_f        = spektrBeers(s_sim(:,ikV),[13 AlThick(iTh)]);
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 mouseSize_b ; spektrCompound2C('Bone') mouseBone]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_B_Al_mouse_b(ikV,iTh)   = sum(s_tmp_d);
        att_B_Al_mouse_b(ikV,iTh)   = sig_B_Al_mouse_b(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_B_Al_mouse_b(ikV,iTh) = sig_B_Al_mouse_b(ikV,iTh)/sum(s_f.*det);
        % Now for the rat
        % Sample
        s_tmp      = spektrBeersCompoundsNIST(s_f,[19 ratSize_b ; spektrCompound2C('Bone') ratBone]);
        % Detector function
        s_tmp_d    = s_tmp.*det;
        % Store result
        sig_B_Al_rat_b(ikV,iTh)   = sum(s_tmp_d);
        att_B_Al_rat_b(ikV,iTh)   = sig_B_Al_rat_b(ikV,iTh)/sum(s_tmp.*detIdeal);
        att_t_B_Al_rat_b(ikV,iTh) = sig_B_Al_rat_b(ikV,iTh)/sum(s_f.*det);
        s_sim_Al_f_b(:,ikV,iTh)   = s_f;
        sig_fl_B_Al_b(ikV,iTh)  = sum(s_f.*det);
    end
end

% Compute the necessary power
sig_B_Cu_mouse_s_b = sig_B_Cu_mouse_b * sc_factor;
sig_B_Cu_rat_s_b   = sig_B_Cu_rat_b   * sc_factor;
sig_B_Al_mouse_s_b = sig_B_Al_mouse_b * sc_factor;
sig_B_Al_rat_s_b   = sig_B_Al_rat_b   * sc_factor;
sig_fl_B_Cu_s_b    = sig_fl_B_Cu_b    * sc_factor;
sig_fl_B_Al_s_b    = sig_fl_B_Al_b    * sc_factor;

% Now translate signal to power values, trying to obtain the minimum
% realistic energy

% Desired signal - we want to work at around 80% of the dynamic range,
% which is a common working point for flat-panel detectors
avDark       = avedk;
bitDepth     = 14;
targetSignal = 0.9 * (((2.0^bitDepth) - 1.0) - avDark)

% See the current necessary to get the flood data
cur_fl_B_Cu_b = (1.0./sig_fl_B_Cu_s_b) * targetSignal;
cur_fl_B_Al_b = (1.0./sig_fl_B_Al_s_b) * targetSignal;

% Compute Powers
pow_fl_B_Cu_b    = repmat(kVVec',[1 nCuTh]).*cur_fl_B_Cu_b;
pow_fl_B_Al_b    = repmat(kVVec',[1 nAlTh]).*cur_fl_B_Al_b;
pow_fl_B_Cu_b_b4 = pow_fl_B_Cu_b/4.0;
pow_fl_B_Al_b_b4 = pow_fl_B_Al_b/4.0;

% Now get the signal level we'll get for the given current value
detSig_B_Cu_mouse_s_b = sig_B_Cu_mouse_s_b.*cur_fl_B_Cu_b;
detSig_B_Cu_rat_s_b   = sig_B_Cu_rat_s_b.*cur_fl_B_Cu_b;
detSig_B_Al_mouse_s_b = sig_B_Al_mouse_s_b.*cur_fl_B_Al_b;
detSig_B_Al_rat_s_b   = sig_B_Al_rat_s_b.*cur_fl_B_Al_b;

% Redefine line styles
LineStyles     = cell(nCuTh,1);
LineStyles{1}  = '-';
LineStyles{2}  = '-';
LineStyles{3}  = '-';
LineStyles{4}  = '-';
LineStyles{5}  = '-';
LineStyles{6}  = '-';

% Plot the data, together with the maximum power limit

outdir_B = 'D:/documents/LIM/thesis/alexd/figures_ch2/data_figure_xx_specOpt_PowBone';
% Power
figure;
hold on;
for iTh = 1:nCuTh,
    ax(iTh) = plot(kVVec,pow_fl_B_Cu_b(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
end
xlim([kVVec(1) kVVec(length(kVVec))]);
line([kVVec(1) kVVec(length(kVVec))],[50 50],'LineStyle',':','LineWidth',2.0,'Color',[0.2 0.2 0.2]);
box on;
% legend(ax,legCu,'Location','NorthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
% print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOptBone_powCu.tif',outdir_B));


figure;
hold on;
for iTh = 1:nCuTh,
    ax(iTh) = plot(kVVec,pow_fl_B_Al_b(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
end
xlim([kVVec(1) kVVec(length(kVVec))]);
line([kVVec(1) kVVec(length(kVVec))],[50 50],'LineStyle',':','LineWidth',2.0,'Color',[0.2 0.2 0.2]);
box on;
% legend(ax,legAl,'Location','NorthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
% print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOptBone_powAl.tif',outdir_B));

% Signal
% Copper with rat and mouse together
figure;
hold on;
for iTh = 1:nCuTh,
    ax_m(iTh) = plot(kVVec,detSig_B_Cu_mouse_s_b(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
    ax_r(iTh) = plot(kVVec,detSig_B_Cu_rat_s_b(:,iTh),'--','LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
end
xlim([kVVec(1) kVVec(length(kVVec))]);
%line([kVVec(1) kVVec(length(kVVec))],[9.0 9.0],'LineStyle',':','LineWidth',1.0,'Color',[0.2 0.2 0.2]);
box on;
% legend(ax_m,legCu,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
% print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOptBone_sigCu.tif',outdir_B));

% Aluminum with rat and mouse together
figure;
hold on;
for iTh = 1:nCuTh,
    ax_m(iTh) = plot(kVVec,detSig_B_Al_mouse_s_b(:,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
    ax_r(iTh) = plot(kVVec,detSig_B_Al_rat_s_b(:,iTh),'--','LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
end
xlim([kVVec(1) kVVec(length(kVVec))]);
%line([kVVec(1) kVVec(length(kVVec))],[9.0 9.0],'LineStyle',':','LineWidth',1.0,'Color',[0.2 0.2 0.2]);
box on;
%legend(ax_m,legAl,'Location','SouthEast');
set(gca,'FontSize',8);
set(gcf,'PaperPositionMode','manual');
set(gcf,'PaperPosition',[0 0 width height]);
set(gcf,'PaperSize',[width height]);
%print(gcf,'-dtiff','-r300',sprintf('%s/figurexx_specOptBone_sigAl.tif',outdir_B));

% 
% 
% 
% % See the current neccesary to get the desired signal and then
% cur_B_Cu_mouse_b    = (1.0./sig_B_Cu_mouse_s_b) * targetSignal;
% cur_B_Cu_rat_b      = (1.0./sig_B_Cu_rat_s_b)   * targetSignal;
% cur_B_Al_mouse_b    = (1.0./sig_B_Al_mouse_s_b) * targetSignal;
% cur_B_Al_rat_b      = (1.0./sig_B_Al_rat_s_b)   * targetSignal;
% % Compute Powers
% pow_B_Cu_mouse_b    = repmat(kVVec',[1 nCuTh]).*cur_B_Cu_mouse_b;
% pow_B_Cu_rat_b      = repmat(kVVec',[1 nCuTh]).*cur_B_Cu_rat_b;
% pow_B_Al_mouse_b    = repmat(kVVec',[1 nCuTh]).*cur_B_Al_mouse_b;
% pow_B_Al_rat_b      = repmat(kVVec',[1 nCuTh]).*cur_B_Al_rat_b;
% 
% pow_B_Cu_mouse_b_b4 = pow_B_Cu_mouse_b/4.0;
% pow_B_Cu_rat_b_b4   = pow_B_Cu_rat_b/4.0;
% pow_B_Al_mouse_b_b4 = pow_B_Al_mouse_b/4.0;
% pow_B_Al_rat_b_b4   = pow_B_Al_rat_b/4.0;
% 
% % Plot data for aluminum, for Cu does not make too much sense
% figure;
% hold on;
% for iTh = 1:nAlTh,
%     plot(kVVec(pow_B_Al_mouse_b_b4(:,iTh) <= 50.0), pow_B_Al_mouse_b_b4(pow_B_Al_mouse_b_b4(:,iTh) <= 50.0,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
% end
% title('Mouse Bone Power for Al filtration');
% figure;
% hold on;
% for iTh = 1:nAlTh,
%     plot(kVVec(pow_B_Cu_mouse_b_b4(:,iTh) <= 50.0), pow_B_Cu_mouse_b_b4(pow_B_Cu_mouse_b_b4(:,iTh) <= 50.0,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
% end
% title('Mouse Bone Power for Cu filtration');
% figure;
% hold on;
% for iTh = 1:nAlTh,
%     plot(kVVec(pow_B_Al_rat_b_b4(:,iTh) <= 50.0), pow_B_Al_rat_b_b4(pow_B_Al_rat_b_b4(:,iTh) <= 50.0,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
% end
% title('Rat Bone Power for Al filtration');
% figure;
% hold on;
% for iTh = 1:nAlTh,
%     plot(kVVec(pow_B_Cu_rat_b_b4(:,iTh) <= 50.0), pow_B_Cu_rat_b_b4(pow_B_Cu_rat_b_b4(:,iTh) <= 50.0,iTh),LineStyles{iTh},'LineWidth',LineWidth{iTh},'Color',ColorStyles{iTh});
% end
% title('Rat Bone Power for Cu filtration');

